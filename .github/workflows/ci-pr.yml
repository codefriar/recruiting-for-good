# Unique name for this workflow
name: CI on PR

# Definition when the workflow should run
on:
    workflow_dispatch:
    pull_request:
        types: [opened, edited, synchronize, reopened]
        branches-ignore:
            - prerelease/spring[2-9][0-9]
            - prerelease/summer[2-9][0-9]
            - prerelease/winter[2-9][0-9]

# Jobs to be executed
jobs:
    # Dummy job used to skip CI run on automated PRs
    skip-ci:
        if: "github.actor == 'trailheadapps-bot'"
        runs-on: ubuntu-latest
        steps:
            - name: Noop
              run: |
                  echo "Skipping CI run for automated PRs."

    # Formatting only runs on human-submitted PRs
    # This job runs outside of a Salesforce Org.
    format-lint-lwc-tests:
        if: "github.actor != 'trailheadapps-bot'"
        runs-on: ubuntu-latest
        steps:
            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2

            # Cache node_modules to speed up the process
            - name: 'Restore node_modules cache'
              id: cache-npm
              uses: actions/cache@v1
              with:
                  path: node_modules
                  key: npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      npm-${{ env.cache-name }}-
                      npm-

            # Install npm dependencies for Prettier and Jest
            - name: 'Install npm dependencies'
              if: steps.cache-npm.outputs.cache-hit != 'true'
              run: npm ci

            # Start local Apex parser server for Prettier
            - name: 'Start local Apex parser server for Prettier'
              run: npm run apex:local:start &

            # Wait for Apex parser server startup
            - name: 'Wait for Apex parser server startup'
              run: timeout 30 bash -c 'until printf "" 2>>/dev/null >>/dev/tcp/$0/$1; do sleep 1; done' 127.0.0.1 2117

            # Prettier formatting
            - name: 'Code formatting verification with Prettier'
              run: npm run prettier:verify:apex:local

            # Stop local Apex parser server for Prettier
            - name: 'Stop local Apex parser server for Prettier'
              if: always()
              run: npm run apex:local:stop

            # Lint LWC
            - name: 'Lint Lightning Web Components'
              run: npm run lint
    scratch-org-test:
        runs-on: ubuntu-latest
        needs: format-lint-lwc-tests
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # Install Salesforce CLI Scanner
            - name: 'Install Salesforce CLI Scanner'
              run: sfdx plugins:install @salesforce/sfdx-scanner

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2

            # Run Salesforce CLI Scanner For Security checks
            - name: 'Scan For Security Exceptions'
              run: sfdx scanner:run --pmdconfig ruleset.xml --target ./force-app --engine pmd -v

            # Store secret for dev hub
            - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
              shell: bash
              run: |
                  echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt
                  secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
                  if [ $secretFileSize == 1 ]; then
                      echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
                      exit 1;
                  fi

            # Authenticate dev hub
            - name: 'Authenticate Dev Hub'
              run: sfdx auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d

            # Create scratch org
            - name: 'Create scratch org'
              run: sfdx force:org:create -f config/project-scratch-def.json -a scratch-org -s -d 1

            # Deploy source to scratch org
            - name: 'Push source to scratch org'
              run: sfdx force:source:push

            # Run Apex tests in scratch org
            - name: 'Run Apex tests'
              run: sfdx force:apex:test:run -c -r human -d ./tests/apex -w 20

            # Delete temporary test file that Codecov is unable to parse
            - name: 'Delete coverage file (temporary step)'
              run: rm ./tests/apex/test-result-707*-codecoverage.json

            # Upload code coverage data
            - name: 'Upload code coverage for Apex to Codecov.io'
              uses: codecov/codecov-action@v2.0.2
              with:
                  flags: Apex

            # Housekeeping
            - name: 'Delete scratch org'
              if: always()
              run: sfdx force:org:delete -p -u scratch-org